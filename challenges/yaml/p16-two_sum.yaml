# https://yaml-multiline.info/
id: p16
name: Two Sum
description: |
  # Problem Description
  
  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
  
  You may assume that each input would have exactly one solution, and you may not use the same element twice.
  
  You can return the answer in any order.
  
  ## Example 1:
  
  ~~~js
  Input: nums = [2,7,11,15], target = 9
  Output: [0,1]
  Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
  ~~~
  
  ## Example 2:
  
  ~~~js
  Input: nums = [3,2,4], target = 6
  Output: [1,2]
  ~~~
  
  ## Example 3:
  
  ~~~js
  Input: nums = [3,3], target = 6
  Output: [0,1]
  ~~~
  
  ## Constraints:
  
  - 2 <= nums.length <= 104
  - -109 <= nums[i] <= 109
  - -109 <= target <= 109
  - Only one valid answer exists.
  
  Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?
ai_description: |
  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
  You may assume that each input would have exactly one solution, and you may not use the same element twice.
  You can return the answer in any order.
difficulty: easy
tags:
  - array
  - search
signature: |
  def two_sum(nums, target):
    pass
solutions:
  - summary: Brute force
    content: |
      ```python
      def two_sum(nums, target):
        for i in range(len(nums)):
          for j in range(i+1, len(nums)):
            if nums[i] + nums[j] == target:
              return [i, j]
      ```
  - summary: Optimised version using Hash table
    content: |
      ```python
      def two_sum(nums, target):
        seen = dict()
        for i, num in enumerate(nums):
          complement = target - num
          if complement in seen:
            return [seen[complement], i]
          seen[num] = i
      ```
assertions: |
  from hamcrest import *
  from testing import TestReport, test
  
  test(report, lambda: assert_that(two_sum([2,7,11,15], 9), equal_to([0,1])), 'two_sum([2,7,11,15], 9) should be equal to [0,1]')
  test(report, lambda: assert_that(two_sum([3,2,4], 6), equal_to([1,2])), 'two_sum([3,2,4], 6) should be equal to [1,2]')
  test(report, lambda: assert_that(two_sum([3,3], 6), equal_to([0,1])), 'two_sum([3,3], 6) should be equal to [0,1]')