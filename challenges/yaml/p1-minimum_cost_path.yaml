id: p1
name: Minimum Cost Path
description: |
  # Problem Description
  
  Given a cost matrix cost[][] and a position (m, n) in cost[][], write a function that returns cost of minimum cost path to reach (m, n) from (0, 0). Each cell of the matrix represents a cost to traverse through that cell. The total cost of a path to reach (m, n) is the sum of all the costs on that path (including both source and destination). You can only traverse down, right and diagonally lower cells from a given cell, i.e., from a given cell (i, j), cells (i+1, j), (i, j+1), and (i+1, j+1) can be traversed. 
  
  ## Example 1:
  
  ~~~python
  Input: cost = [[1, 2, 3], [4, 8, 2], [1, 5, 3]], m = 2, n = 2
  Output: 8
  Explanation: Because the minimum cost path is 1->2->2->3, we return 8.
  ~~~
difficulty: medium
tags:
  - dynamic programming
  - matrix
signature: |
  def min_cost(cost, m, n):
    pass
solutions:
  - summary: Brute force solution
    content: |
      ```python
      def min_cost(cost, m, n):
        if m < 0 or n < 0:
          return float('inf')
        elif m == 0 and n == 0:
          return cost[m][n]
        else:
          return cost[m][n] + min(min_cost(cost, m - 1, n - 1), min_cost(cost, m - 1, n), min_cost(cost, m, n - 1))
      ```
  - summary: Dynamic programming top-down solution
    content: |
      ```python
      def min_cost(cost, m, n):
        tc = [[-1 for _ in range(n + 1)] for _ in range(m + 1)]
        return min_cost_helper(cost, m, n, tc)
      
      def min_cost_helper(cost, m, n, tc):
        if m < 0 or n < 0:
          return float('inf')
        elif m == 0 and n == 0:
          return cost[m][n]
        elif tc[m][n] != -1:
          return tc[m][n]
        else:
          tc[m][n] = cost[m][n] + min(min_cost_helper(cost, m - 1, n - 1, tc), min_cost_helper(cost, m - 1, n, tc), min_cost_helper(cost, m, n - 1, tc))
          return tc[m][n]
      ```
  - summary: Dynamic programming bottom-up solution
    content: |
      ```python
      def min_cost(cost, m, n):
        tc = [[0 for _ in range(n + 1)] for _ in range(m + 1)]
      
        tc[0][0] = cost[0][0]
        for i in range(1, m + 1):
          tc[0][i] = tc[0][i - 1] + cost[0][i]
        
        for i in range(1, n + 1):
          tc[i][0] = tc[i - 1][0] + cost[i][0]
      
        for i in range(1, m+1):
          for j in range(1, n+1):
            tc[i][j] = min(tc[i-1][j], tc[i][j-1], tc[i-1][j-1]) + cost[i][j]
        
        return tc[m][n]
      ```
assertions: |
  from hamcrest import *
  from testing import TestReport, test
  
  test(report, lambda: assert_that(min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2), equal_to(8)), 'min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) should be equal to 8')
  test(report, lambda: assert_that(min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2), equal_to(12)), 'min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) should be equal to 12')
  test(report, lambda: assert_that(min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2), equal_to(16)), 'min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) should be equal to 16')