{
    "ai_description": "# Problem Description\n\nWrite a Python function to identify non-prime numbers.\n\nA non-prime number is a positive integer greater than 1 that is not a prime number. In other words, it has factors other than 1 and itself.\n\n## Example 1:\n\n~~~python\nInput: 2\nOutput: False\nExplanation: 2 is a prime number, so the output is False.\n~~~\n\n## Example 2:\n\n~~~python\nInput: 10\nOutput: True\nExplanation: 10 is not a prime number because it has factors other than 1 and itself (2 and 5), so the output is True.\n~~~\n\n## Example 3:\n\n~~~python\nInput: 35\nOutput: True\nExplanation: 35 is not a prime number because it has factors other than 1 and itself (5 and 7), so the output is True.\n~~~\n",
    "assertions": "from hamcrest import *\nfrom testing import TestReport, test\n\ntest(report, lambda: assert_that(is_not_prime(2), equal_to(False)), 'is_not_prime(2) should be equal to False')\ntest(report, lambda: assert_that(is_not_prime(10), equal_to(True)), 'is_not_prime(10) should be equal to True')\ntest(report, lambda: assert_that(is_not_prime(35), equal_to(True)), 'is_not_prime(35) should be equal to True')",
    "description": "# Problem Description\n\nWrite a Python function to identify non-prime numbers.\n\nA non-prime number is a positive integer greater than 1 that is not a prime number. In other words, it has factors other than 1 and itself.\n\n## Example 1:\n\n~~~python\nInput: 2\nOutput: False\nExplanation: 2 is a prime number, so the output is False.\n~~~\n\n## Example 2:\n\n~~~python\nInput: 10\nOutput: True\nExplanation: 10 is not a prime number because it has factors other than 1 and itself (2 and 5), so the output is True.\n~~~\n\n## Example 3:\n\n~~~python\nInput: 35\nOutput: True\nExplanation: 35 is not a prime number because it has factors other than 1 and itself (5 and 7), so the output is True.\n~~~\n",
    "difficulty": "easy",
    "id": "p3",
    "name": "Non-prime Numbers Identification",
    "signature": "def is_not_prime(n):\n  pass\n",
    "solutions": [
        {
            "content": "```python\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n```\n",
            "summary": "Iterative solution"
        }
    ],
    "tags": [
        "prime numbers",
        "mathematics"
    ]
}