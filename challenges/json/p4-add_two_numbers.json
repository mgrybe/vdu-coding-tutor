{
    "assertions": "from hamcrest import *\nfrom testing import TestReport, test\n\ntest(report, lambda: assert_that(add_two_numbers([2,4,3], [5,6,4]), equal_to([7,0,8])), 'add_two_numbers([2,4,3], [5,6,4]) should be equal to [7,0,8]')\ntest(report, lambda: assert_that(add_two_numbers([0], [0]), equal_to([0])), 'add_two_numbers([0], [0]) should be equal to [0]')",
    "description": "# Problem Description\n\nYou are given two non-empty lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n## Example 1:\n\n~~~js\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n~~~\n\n## Example 2:\n\n~~~js\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n~~~\n\n## Example 3:\n\n~~~js\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n~~~\n\n## Constraints:\n\n- The number of elements in each list is in the range [1, 100].\n- 0 <= element <= 9\n- It is guaranteed that the list represents a number that does not have leading zeros.\n",
    "difficulty": "medium",
    "id": "p4",
    "name": "Add Two Numbers",
    "signature": "def add_two_numbers(l1, l2):\n  pass\n"
}