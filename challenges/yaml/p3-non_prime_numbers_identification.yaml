id: p3
name: Non-prime Numbers Identification
description: |
  # Problem Description

  Write a Python function to identify non-prime numbers.

  A non-prime number is a positive integer greater than 1 that is not a prime number. In other words, it has factors other than 1 and itself.

  ## Example 1:

  ~~~python
  Input: 2
  Output: False
  Explanation: 2 is a prime number, so the output is False.
  ~~~

  ## Example 2:

  ~~~python
  Input: 10
  Output: True
  Explanation: 10 is not a prime number because it has factors other than 1 and itself (2 and 5), so the output is True.
  ~~~

  ## Example 3:

  ~~~python
  Input: 35
  Output: True
  Explanation: 35 is not a prime number because it has factors other than 1 and itself (5 and 7), so the output is True.
  ~~~
ai_description: |
  # Problem Description

  Write a Python function to identify non-prime numbers.

  A non-prime number is a positive integer greater than 1 that is not a prime number. In other words, it has factors other than 1 and itself.

  ## Example 1:

  ~~~python
  Input: 2
  Output: False
  Explanation: 2 is a prime number, so the output is False.
  ~~~

  ## Example 2:

  ~~~python
  Input: 10
  Output: True
  Explanation: 10 is not a prime number because it has factors other than 1 and itself (2 and 5), so the output is True.
  ~~~

  ## Example 3:

  ~~~python
  Input: 35
  Output: True
  Explanation: 35 is not a prime number because it has factors other than 1 and itself (5 and 7), so the output is True.
  ~~~
difficulty: easy
tags:
  - prime numbers
  - mathematics
signature: |
  def is_not_prime(n):
    pass
solutions:
  - summary: Iterative solution
    content: |
      ```python
      import math
      def is_not_prime(n):
          result = False
          for i in range(2,int(math.sqrt(n)) + 1):
              if n % i == 0:
                  result = True
          return result
      ```
assertions: |
  from hamcrest import *
  from testing import TestReport, test
  
  test(report, lambda: assert_that(is_not_prime(2), equal_to(False)), 'is_not_prime(2) should be equal to False')
  test(report, lambda: assert_that(is_not_prime(10), equal_to(True)), 'is_not_prime(10) should be equal to True')
  test(report, lambda: assert_that(is_not_prime(35), equal_to(True)), 'is_not_prime(35) should be equal to True')